# Autogenerated! Edit minai_nbs/plot.ipynb instead

import copy

import matplotlib.pyplot as plt
import torch

#plt.style.use("dark_background")

def default_cmap(param): plt.rcParams.update({"image.cmap": param})
def default_title_color(param): plt.rcParams.update({"text.color": param})

class PlotOpts:
    def __init__(self, figsize=None, cmap=None, ax=None, title=None,
                 titles=None, rows=None, cols=None, fontsize=None,
                 supfontsize=None, wspace=None, hspace=None):
        self.figsize = figsize
        self.cmap = cmap
        self.ax = ax
        self.title = title
        self.titles = titles
        self.rows = rows
        self.cols = cols
        self.fontsize = fontsize
        self.supfontsize = supfontsize
        self.wspace = wspace
        self.hspace = hspace

def show_img(img, opts: PlotOpts = None):
    opts = opts or PlotOpts()
    
    assert type(img) is torch.Tensor
    if img.device != "cpu": img = img.detach().to("cpu")
    img = img.permute(1, 2, 0)

    ax = opts.ax
    if not opts.ax:
        fig, ax = plt.subplots(1, 1, figsize=opts.figsize)
        fig.patch.set_visible(False)
        ax.axis("off")

    if type(opts.title) is torch.Tensor: opts.title = str(opts.title.item())

    ax.imshow(img, cmap=opts.cmap)
    ax.set_title(opts.title, fontsize=opts.fontsize)

def show_batch(imgs, opts: PlotOpts):
    fig, axs = plt.subplots(opts.rows, opts.cols, figsize=opts.figsize, 
                            layout="constrained", 
                            gridspec_kw={"wspace": opts.wspace, 
                                         "hspace": opts.hspace})
    fig.patch.set_visible(False)
    fig.suptitle(opts.title, size=opts.supfontsize)
    
    if opts.rows*opts.cols == 1: axs = [axs]
    else: axs = axs.flatten()

    if opts.titles:
        if type(opts.titles[0]) is list:
            opts.titles = [" | ".join(str(i) for i in x) for x in opts.titles]

    for i, ax in enumerate(axs):
        ax.axis("off")

        if i < len(imgs):
            imgopts = copy.copy(opts)
            imgopts.ax = ax
            imgopts.title = opts.titles[i] if opts.titles else None
            show_img(imgs[i], imgopts)


